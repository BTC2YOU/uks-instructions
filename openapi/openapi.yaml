openapi: 3.0.3
info:
  contact:
    email: hello@upcloud.com
    name: UpCloud Orchestration team
    url: https://github.com/UpCloudLtd/
  description: |
    **This is a beta feature, please contact us if you have questions or run into any problems!**
    
    Kubernetes is a container orchestration system for automating, managing and scaling software deployment.

    UpCloud Managed Kubernetes allows you to easily create Kubernetes clusters without having to take care about low level details.
  title: Managed Kubernetes
  version: 0.8.0
servers:
  - description: UpCloud API
    url: "https://api.upcloud.com/1.3/kubernetes"
paths:
  /:
    get:
      description: List clusters
      summary: |
        Returns a list of Kubernetes clusters.
      operationId: listClusters
      responses:
        "200":
          description: List clusters response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/cluster"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unAuthorized"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - cluster
    post:
      description: Create cluster
      summary: |
        Creates a new Kubernetes cluster.
      operationId: createCluster
      requestBody:
        description: Create cluster request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cluster"
      responses:
        "201":
          description: Create cluster response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unProcessableEntity"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - cluster
  /{uuid}:
    delete:
      description: Delete cluster
      summary: |
        Deletes an existing Kubernetes cluster by given `{uuid}`.
      operationId: deleteCluster
      responses:
        "202":
          $ref: "#/components/responses/accepted"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - cluster
    get:
      description: Get cluster details
      summary: |
        Returns Kubernetes cluster details by given `{uuid}`.
      operationId: getClusterDetails
      responses:
        "200":
          description: Get cluster details response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - cluster
    parameters:
      - $ref: "#/components/parameters/uuidParameter"
  /{uuid}/kubeconfig:
    get:
      description: Get kubeconfig
      summary: |
        Returns kubeconfig for Kubernetes cluster by given `{uuid}`.
        
        See https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/ .
      operationId: getKubeconfig
      responses:
        "200":
          description: Get kubeconfig response
          content:
            application/json:
              schema:
                properties:
                  kubeconfig:
                    $ref: "#/components/schemas/kubeconfig"
                required:
                  - kubeconfig
                type: object
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - cluster
    parameters:
      - $ref: "#/components/parameters/uuidParameter"
  /{uuid}/node-groups:
    get:
      description: List node groups
      summary: |
        Returns a list of available node groups of an existing Kubernetes cluster. Cluster is identified by given {uuid}.
        
        A node group is a uniform set of worker nodes attached to a cluster.
      operationId: listNodeGroups
      responses:
        "200":
          description: List node groups response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/nodeGroup"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - nodeGroup
    post:
      description: Create node group
      summary: |
        Creates a new node group to an existing Kubernetes cluster. Cluster is identified by given {uuid}.
      operationId: createNodeGroup
      requestBody:
        description: Create node group request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/nodeGroup"
      responses:
        "201":
          description: Create node group response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/nodeGroup"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unProcessableEntity"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - nodeGroup
    parameters:
      - $ref: "#/components/parameters/uuidParameter"
  /{uuid}/node-groups/{node_group_name}:
    get:
      description: Get node group details
      summary: |
        Returns node group details by given {node_group_name}. Cluster is identified by given {uuid}.
      operationId: getNodeGroupDetails
      responses:
        "200":
          description: Get node group details response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/nodeGroup"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - nodeGroup
    delete:
      description: Delete node group
      summary: |
        Deletes existing node group by given Kubernetes cluster `{uuid}` and node group `{name}`.
      operationId: deleteNodeGroup
      responses:
        "202":
          $ref: "#/components/responses/accepted"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - nodeGroup
    patch:
      description: Modify node group
      summary: |
        Modifies an existing node group by given {node_group_name}. Cluster is identified by given {uuid}.
      operationId: modifyNodeGroup
      requestBody:
        description: Modify node group request
        content:
          application/json:
            schema:
              properties:
                count:
                  $ref: "#/components/schemas/nodeGroupCount"
              maxProperties: 1
              required:
                - count
      responses:
        "200":
          description: Modify node group response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/nodeGroup"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unProcessableEntity"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - nodeGroup
    parameters:
      - $ref: "#/components/parameters/uuidParameter"
      - $ref: "#/components/parameters/nodeGroupNameParameter"
  /versions:
    get:
      description: List Kubernetes versions
      summary: |
        Returns a list of available Kubernetes versions.
      operationId: listVersions
      responses:
        "200":
          description: List Kubernetes versions response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/version"
        "401":
          $ref: "#/components/responses/unAuthorized"
        default:
          $ref: "#/components/responses/internalServerError"
      tags:
        - version
components:
  parameters:
    uuidParameter:
      description: Path parameter for cluster UUID
      in: path
      name: uuid
      required: true
      schema:
        format: uuid
        type: string
    nodeGroupNameParameter:
      description: Path parameter for node group name
      in: path
      name: node_group_name
      required: true
      schema:
        $ref: "#/components/schemas/nodeGroupName"
  responses:
    accepted:
      description: Accepted
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
            type: object
    badRequest:
      description: Bad request
      content:
        application/problem+json:
          example:
            type: https://developers.upcloud.com/1.3/errors#INVALID_REQUEST
            title: payload validation failed
            correlation_id: 01GSCRT0RDS9EB2HMMMP5550ZR
            status: 400
          schema:
            $ref: "#/components/schemas/error"
    internalServerError:
      description: Internal server error response
      content:
        application/problem+json:
          example:
            type: https://developers.upcloud.com/1.3/errors#ERROR_GENERIC_ERROR
            title: failed to get version.
            correlation_id: 01GSCRT0RDS9EB2HMMMP5550ZR
            status: 500
          schema:
            $ref: "#/components/schemas/error"
    notFound:
      description: Not found response
      content:
        application/problem+json:
          example:
            type: https://developers.upcloud.com/1.3/errors#ERROR_NOT_FOUND
            title: cluster not found.
            correlation_id: 01GSCRT0RDS9EB2HMMMP5550ZR
            status: 404
          schema:
            $ref: "#/components/schemas/error"
    unAuthorized:
      description: Unauthorized response
      content:
        application/problem+json:
          example:
            type: https://developers.upcloud.com/1.3/errors#AUTHENTICATION_FAILED
            title: Authentication failed using the given username and password.
            correlation_id: 01GSCRT0RDS9EB2HMMMP5550ZR
            status: 401
          schema:
            $ref: "#/components/schemas/error"
    unProcessableEntity:
      description: Unprocessable entity response
      content:
        application/problem+json:
          example:
            type: https://developers.upcloud.com/1.3/errors#INVALID_REQUEST
            title: zone is not valid
            correlation_id: 01GSCRT0RDS9EB2HMMMP5550ZR
            status: 422
          schema:
            $ref: "#/components/schemas/error"
  schemas:
    cluster:
      description: Kubenernetes cluster
      properties:
        name:
          title: Kubernetes cluster
          description: The name of the Kubernetes cluster must be unique within customer account.
          example: example-cluster-1
          allOf:
            - $ref: "#/components/schemas/name"
        network:
          title: Network UUID where node groups will provisioned. Must reside in Kubernetes cluster zone.
          description: A valid network identifier in UUID format
          format: uuid
          type: string
        network_cidr:
          title: IP range of the given network.
          description: IP range in CIDR format
          pattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2])){1}$
          example: 172.16.0.0/24
        node_groups:
          description: An array of 0 or more node group objects
          type: array
          items:
            $ref: "#/components/schemas/nodeGroup"
        state:
          $ref: "#/components/schemas/state"
        uuid:
          format: uuid
          type: string
        zone:
          title: UpCloud zone to provision the Kubernetes cluster in
          description: |
            `de-fra1` / `fi-hel2`
          minLength: 6
          type: string
          example: fi-hel2
      required:
        - name
        - network
        - network_cidr
        - zone
      type: object
    error:
      description: Response error
      properties:
        type:
          $ref: "#/components/schemas/errorType"
        title:
          $ref: "#/components/schemas/errorTitle"
        status:
          $ref: "#/components/schemas/errorStatus"
        correlation_id:
          $ref: "#/components/schemas/errorCorrelationID"
      required:
        - error
        - type
        - title
        - status
        - correlation_id
      type: object
    errorType:
      description: URI to a page describing the problem
      type: string
      example: "https://developers.upcloud.com/1.3/errors#ERROR_INVALID_REQUEST"
    errorTitle:
      description: human-readable description of the error
      type: string
      example: "Zone is not valid, valid values: [de-fra1 fi-hel2]."
    errorCorrelationID:
      description: unique string that identifies the request that caused the error
      type: string
      example: 01GSCRT0RDS9EB2HMMMP5550ZR
    errorStatus:
      description: HTTP Status code
      type: integer
      example: 422
    kubeconfig:
      description: Kubeconfig for authenticating against the cluster API
      type: string
      example: |
        apiVersion: v1
        clusters:
          - cluster:
              certificate-authority-data: BASE64
              server: https://server:6443
            name: example-cluster-1
        contexts:
          - context:
              cluster: example-cluster-1
              user: example-cluster-1-admin
            name: example-cluster-1-admin@example-cluster-1
        current-context: example-cluster-1-admin@example-cluster-1
        kind: Config
        preferences: {}
        users:
          - name: example-cluster-1-admin
            user:
              client-certificate-data: BASE64
              client-key-data: BASE64
    kubeletArg:
      description: Kubelet argument presented as key-value pair
      properties:
        key:
          title: Key representing the kubelet argument
          example: log-flush-frequency
          type: string
          minLength: 1
          maxLength: 253
        value:
          title: Key representing the kubelet argument
          example: 5s
          type: string
          minLength: 1
          maxLength: 253
      required:
        - key
        - value
      type: object
    label:
      description: Label presented as a key-value pair for classifying the resource.
      properties:
        key:
          title: Key representing the label
          description: 1-63 letters, numbers, `-`, `_`, `.` & `/`. Cannot start or end with `-`, `_`, `.` & `/`
          type: string
          minLength: 1
          maxLength: 63
          example: team
        value:
          title: Key representing the value
          description: 0-63 letters, numbers, `-`, `_` & `.`. Cannot start or end with `-`, `_` & `.`
          type: string
          maxLength: 63
          minLength: 0
          example: development
      required:
        - key
        - value
      type: object
    name:
      minLength: 3
      maxLength: 64
      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
      type: string
    nodeGroup:
      description: Node group for a Kubernetes cluster
      properties:
        count:
          $ref: "#/components/schemas/nodeGroupCount"
        kubelet_args:
          type: array
          items:
            $ref: "#/components/schemas/kubeletArg"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/label"
        name:
          $ref: "#/components/schemas/nodeGroupName"
        plan:
          description: Plan to assign to a node group
          type: string
          example: 4xCPU-8GB
        ssh_keys:
          type: array
          items:
            $ref: "#/components/schemas/sshKey"
        state:
          $ref: "#/components/schemas/state"
        storage:
          description: Storage template for node provisioning
          format: uuid
          type: string
          default: 01000000-0000-4000-8000-000160010100
          example: 01000000-0000-4000-8000-000160010100
        taints:
          type: array
          items:
            $ref: "#/components/schemas/taint"
        anti_affinity:
          description: Anti-affinity policy. Nodes will try to avoid underlying UpCloud hosts that already have nodes from the same noe group during the start or creation phase.
          type: boolean
          default: false
          example: false
      required:
        - count
        - name
        - plan
      type: object
    nodeGroupCount:
      description: Number of nodes
      format: int64
      minimum: 1
      type: integer
      example: 3
    nodeGroupName:
      description: Node group name
      example: example-node-group-1
      allOf:
        - $ref: "#/components/schemas/name"
    sshKey:
      description: Public SSH key for remote node access.
      pattern: ^ssh-[0-9A-Za-z]+ AAAA[0-9A-Za-z+/]+[=]{0,3}[ ]?([^@]+@[^@]+)?$
      type: string
      example: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG0LHaiLjqyWm3P+HSy2GxbZ4HU+HQ3LZ5fA51+Kp9Yi
    state:
      description: Resource operational state
      enum:
        - failed
        - pending
        - running
        - terminating
        - unknown
      type: string
      readOnly: true
      example: running
    taint:
      description: Kubernetes taint to assign to nodes in a group
      properties:
        effect:
          title: Effect of the taint
          enum:
            - NoExecute
            - NoSchedule
            - PreferNoSchedule
          type: string
          example: NoSchedule
        key:
          title: Key representing the taint
          description: The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to 253 characters.
          example: team
          type: string
          minLength: 1
          maxLength: 253
        value:
          title: Key representing the value
          description: The value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to 63 characters.
          example: development
          minLength: 0
          maxLength: 63
      required:
        - effect
        - key
      type: object
    version:
      description: Kubernetes version
      type: string
      example: "1.25.0"
tags:
  - description: Kubernetes cluster
    name: cluster
  - description: Node groups
    name: nodeGroup
  - description: Version
    name: version
